{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\bazar\\\\Downloads\\\\techgyan_workshop-master\\\\techgyan_workshop-master\\\\chatgpt-rapidapi-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Link to the CSS file for styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [input, setInput] = useState(\"\"); // State to hold the user input\n  const [messages, setMessages] = useState([]); // State to hold the messages\n  const [loading, setLoading] = useState(false); // Loading state to show when data is being fetched\n\n  // Function to handle sending the request\n  const handleSend = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    const newMessage = {\n      role: \"user\",\n      content: input\n    }; // Create the new message\n\n    // Update the message array with the user's message\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n    setInput(\"\"); // Clear input field after sending message\n\n    setLoading(true); // Set loading state to true\n\n    try {\n      // Send only the current message (not including the entire previous message history)\n      const response = await axios.post(\"https://chatgpt-42.p.rapidapi.com/gpt4\",\n      // API endpoint\n      {\n        messages: [newMessage],\n        // Send only the current message\n        web_access: false\n      }, {\n        headers: {\n          \"x-rapidapi-key\": \"6ae6c279ecmsh1aaccd21ed7fc67p104f29jsn37ebb2aa65c7\",\n          // Replace with your API key\n          \"x-rapidapi-host\": \"chatgpt-42.p.rapidapi.com\",\n          \"Content-Type\": \"application/json\"\n        }\n      });\n      console.log(\"Response Data:\", response.data); // Log the response data\n\n      // Format the response by splitting at line breaks\n      const formattedResponse = response.data.result.split(\"\\n\").map((line, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"response-line\",\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this));\n\n      // Update the state with the assistant's response\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: formattedResponse\n      }]);\n    } catch (error) {\n      console.error(\"Error:\", error); // Log any error that occurs\n      setMessages(prevMessages => [...prevMessages, {\n        role: \"assistant\",\n        content: \"Error: Unable to fetch response.\"\n      }]);\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"TechGyan\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Ask anything about tech...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: [messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: msg.role,\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: msg.role === \"user\" ? \"You: \" : \"Bot: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-content\",\n            children: msg.role === \"assistant\" ? msg.content : msg.content.split(\"\\n\").map((line, idx) => /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"response-line\",\n              children: line\n            }, idx, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Loading...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 23\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"4bfI0gkk1w7TOu/oiFMuYSRPMyI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","App","_s","input","setInput","messages","setMessages","loading","setLoading","handleSend","trim","newMessage","role","content","prevMessages","response","post","web_access","headers","console","log","data","formattedResponse","result","split","map","line","index","className","children","fileName","_jsxFileName","lineNumber","columnNumber","error","msg","idx","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/bazar/Downloads/techgyan_workshop-master/techgyan_workshop-master/chatgpt-rapidapi-app/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\"; // Link to the CSS file for styles\n\nfunction App() {\n  const [input, setInput] = useState(\"\"); // State to hold the user input\n  const [messages, setMessages] = useState([]); // State to hold the messages\n  const [loading, setLoading] = useState(false); // Loading state to show when data is being fetched\n\n  // Function to handle sending the request\n  const handleSend = async () => {\n    if (!input.trim()) return; // Prevent sending empty messages\n\n    const newMessage = { role: \"user\", content: input }; // Create the new message\n\n    // Update the message array with the user's message\n    setMessages((prevMessages) => [...prevMessages, newMessage]);\n    setInput(\"\"); // Clear input field after sending message\n\n    setLoading(true); // Set loading state to true\n\n    try {\n      // Send only the current message (not including the entire previous message history)\n      const response = await axios.post(\n        \"https://chatgpt-42.p.rapidapi.com/gpt4\", // API endpoint\n        {\n          messages: [newMessage], // Send only the current message\n          web_access: false,\n        },\n        {\n          headers: {\n            \"x-rapidapi-key\": \"6ae6c279ecmsh1aaccd21ed7fc67p104f29jsn37ebb2aa65c7\", // Replace with your API key\n            \"x-rapidapi-host\": \"chatgpt-42.p.rapidapi.com\",\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      console.log(\"Response Data:\", response.data); // Log the response data\n\n      // Format the response by splitting at line breaks\n      const formattedResponse = response.data.result\n        .split(\"\\n\")\n        .map((line, index) => (\n          <p key={index} className=\"response-line\">\n            {line}\n          </p>\n        ));\n\n      // Update the state with the assistant's response\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: \"assistant\", content: formattedResponse },\n      ]);\n    } catch (error) {\n      console.error(\"Error:\", error); // Log any error that occurs\n      setMessages((prevMessages) => [\n        ...prevMessages,\n        { role: \"assistant\", content: \"Error: Unable to fetch response.\" },\n      ]);\n    } finally {\n      setLoading(false); // Set loading state to false\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"chat-container\">\n        <div className=\"header\">\n          <h1>TechGyan</h1>\n          <p>Ask anything about tech...</p>\n        </div>\n        <div className=\"chat-box\">\n          {messages.map((msg, index) => (\n            <div key={index} className={msg.role}>\n              <strong>{msg.role === \"user\" ? \"You: \" : \"Bot: \"}</strong>\n              <div className=\"message-content\">\n                {msg.role === \"assistant\"\n                  ? msg.content\n                  : msg.content.split(\"\\n\").map((line, idx) => (\n                      <p key={idx} className=\"response-line\">\n                        {line}\n                      </p>\n                    ))}\n              </div>\n            </div>\n          ))}\n          {loading && <div>Loading...</div>}\n        </div>\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type a message...\"\n          />\n          <button onClick={handleSend}>Send</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}